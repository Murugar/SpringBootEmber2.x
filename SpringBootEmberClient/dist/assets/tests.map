{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","SpringBootEmberClient/tests/app.lint-test.js","SpringBootEmberClient/tests/helpers/destroy-app.js","SpringBootEmberClient/tests/helpers/module-for-acceptance.js","SpringBootEmberClient/tests/helpers/resolver.js","SpringBootEmberClient/tests/helpers/start-app.js","SpringBootEmberClient/tests/integration/components/user-form-test.js","SpringBootEmberClient/tests/test-helper.js","SpringBootEmberClient/tests/tests.lint-test.js","SpringBootEmberClient/tests/unit/adapters/application-test.js","SpringBootEmberClient/tests/unit/controllers/list-user-test.js","SpringBootEmberClient/tests/unit/controllers/message-test.js","SpringBootEmberClient/tests/unit/controllers/user/create-test.js","SpringBootEmberClient/tests/unit/controllers/user/edit-test.js","SpringBootEmberClient/tests/unit/controllers/user/show-test.js","SpringBootEmberClient/tests/unit/models/user-test.js","SpringBootEmberClient/tests/unit/routes/index-test.js","SpringBootEmberClient/tests/unit/routes/list-user-test.js","SpringBootEmberClient/tests/unit/routes/message-test.js","SpringBootEmberClient/tests/unit/routes/user/create-test.js","SpringBootEmberClient/tests/unit/routes/user/edit-test.js","SpringBootEmberClient/tests/unit/routes/user/show-test.js","SpringBootEmberClient/tests/unit/serializers/application-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('SpringBootEmberClient/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/list-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/list-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/message.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/message.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/user/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/user/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/user/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/user/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/user/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/user/show.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/list-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/list-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/message.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/message.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user/show.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n});","define('SpringBootEmberClient/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n  }\n});","define('SpringBootEmberClient/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'SpringBootEmberClient/tests/helpers/start-app', 'SpringBootEmberClient/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = _ember.default.RSVP.Promise;\n});","define('SpringBootEmberClient/tests/helpers/resolver', ['exports', 'SpringBootEmberClient/resolver', 'SpringBootEmberClient/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('SpringBootEmberClient/tests/helpers/start-app', ['exports', 'ember', 'SpringBootEmberClient/app', 'SpringBootEmberClient/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var application = void 0;\n\n    var attributes = _ember.default.merge({}, _environment.default.APP);\n    attributes = _ember.default.merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember.default.run(function () {\n      application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('SpringBootEmberClient/tests/integration/components/user-form-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('user-form', 'Integration | Component | user form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TBHJsTb0\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"user-form\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yt2ahWY7\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"user-form\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('SpringBootEmberClient/tests/test-helper', ['SpringBootEmberClient/tests/helpers/resolver', 'ember-qunit'], function (_resolver, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n});","define('SpringBootEmberClient/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/user-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/list-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/list-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/message-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/message-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/user/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/user/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/user/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/user/show-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/list-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/message-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/message-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/user/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/user/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/user/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user/show-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n});","define('SpringBootEmberClient/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('SpringBootEmberClient/tests/unit/controllers/list-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:list-user', 'Unit | Controller | list user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('SpringBootEmberClient/tests/unit/controllers/message-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:message', 'Unit | Controller | message', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('SpringBootEmberClient/tests/unit/controllers/user/create-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:user/create', 'Unit | Controller | user/create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('SpringBootEmberClient/tests/unit/controllers/user/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:user/edit', 'Unit | Controller | user/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('SpringBootEmberClient/tests/unit/controllers/user/show-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:user/show', 'Unit | Controller | user/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('SpringBootEmberClient/tests/unit/models/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/list-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:list-user', 'Unit | Route | list user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/message-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:message', 'Unit | Route | message', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/user/create-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:user/create', 'Unit | Route | user/create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/user/edit-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:user/edit', 'Unit | Route | user/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/routes/user/show-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:user/show', 'Unit | Route | user/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('SpringBootEmberClient/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","require('spring-emberj-aaron-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvfA;AACA;","file":"tests.js"}